<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.36">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.gem.persistentparameter.PersistentStringParameterDefinition plugin="persistent-parameter@1.1">
          <name>branch</name>
          <description>What branch should be built?</description>
          <defaultValue>master</defaultValue>
          <successfulOnly>true</successfulOnly>
        </com.gem.persistentparameter.PersistentStringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
    <script>// Command-line options (taken from https://jenkins.io/doc/pipeline/examples/):
// --batch-mode : recommended in CI to inform maven to not run in interactive mode (less logs)
// -V : strongly recommended in CI, will display the JDK and Maven versions in use.
//      Very useful to be quickly sure the selected versions were the ones you think.
// -U : force maven to update snapshots each time (default : once an hour, makes no sense in CI).
// -Dsurefire.useFile=false : useful in CI. Displays test errors in the logs directly (instead of
//                            having to crawl the workspace files to see the cause).
// -e : Display stack-traces on failure
//
// Per https://issues.sonatype.org/browse/NEXUS-18753 we cannot use Staging Workflows for SNAPSHOT builds.
// -------------------------------------------------------------------------------------------------

def repository = &apos;github.com/cmake-maven-project/cmake-maven-project.git&apos;

parallel windows:
{
    node(&quot;windows&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (windows)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/${branch}&apos;]], browser: [$class: &apos;GithubWeb&apos;, repoUrl: &apos;https://github.com/cmake-maven-project/cmake-maven-project/&apos;], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &apos;MessageExclusion&apos;, excludedMessage: &apos;^\\[jenkins\\]&apos;]], gitTool: &apos;jgit&apos;, submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;github&apos;, url: &quot;https://${repository}&quot;]]])
            }
        }
        timeout(25)
        {
            // Windows needs a longer timeout due to Windows Defender (antivirus) slowing things down
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin;${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (windows)&quot;)
                {
                    bat script: &apos;mvn --batch-mode -e -V -U -Dsurefire.useFile=false -Pdeploy clean deploy&apos;
                    archiveArtifacts artifacts: &apos;**/target/*.jar&apos;, excludes: &apos;**/target/test-classes/**&apos;
                }
            }
        }
    }
}, linux:
{
    node(&quot;linux&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (linux)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/${branch}&apos;]], browser: [$class: &apos;GithubWeb&apos;, repoUrl: &apos;https://github.com/cmake-maven-project/cmake-maven-project/&apos;], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &apos;MessageExclusion&apos;, excludedMessage: &apos;^\\[jenkins\\]&apos;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;github&apos;, url: &quot;https://${repository}&quot;]]])
            }
        }
        timeout(25)
        {
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin:${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (linux)&quot;)
                {
                    sh script: &apos;mvn --batch-mode -V -e -U -Dsurefire.useFile=false -Pdeploy clean deploy&apos;
                    archiveArtifacts artifacts: &apos;**/target/*.jar&apos;, excludes: &apos;**/target/test-classes/**&apos;
                }
            }
        }
    }
}, mac:
{
    node(&quot;mac&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (mac)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/${branch}&apos;]], browser: [$class: &apos;GithubWeb&apos;, repoUrl: &apos;https://github.com/cmake-maven-project/cmake-maven-project/&apos;], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: &apos;jgit&apos;, submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;github&apos;, url: &quot;https://${repository}&quot;]]])
            }
        }
        timeout(25)
        {
            // gpg resides in /usr/local/bin
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin:${env.JAVA_HOME}/bin:/usr/local/bin&quot;])
            {
			          stage(&quot;Deploy (mac)&quot;)
                {
                    sh script: &apos;mvn --batch-mode -V -e -U -Dsurefire.useFile=false -Pdeploy clean deploy&apos;
                    archiveArtifacts artifacts: &apos;**/target/*.jar&apos;, excludes: &apos;**/target/test-classes/**&apos;
                }
            }
        }
    }
},
failFast: true</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>60</quietPeriod>
  <disabled>false</disabled>
</flow-definition>